/**
 * Migration Script - Hash Existing Passwords
 * 
 * IMPORTANTE: Este script debe ejecutarse SOLO UNA VEZ
 * para migrar contrase√±as existentes de texto plano a bcrypt.
 * 
 * ‚ö†Ô∏è ADVERTENCIA DE SEGURIDAD:
 * Si tu base de datos tiene usuarios con contrase√±as en texto plano,
 * este script los actualizar√° a contrase√±as hasheadas con bcrypt.
 * 
 * Despu√©s de ejecutar este script, las contrase√±as originales
 * no podr√°n recuperarse (es lo correcto por seguridad).
 * 
 * C√≥mo ejecutar:
 * 1. Aseg√∫rate de tener un backup de tu base de datos
 * 2. Verifica que DATABASE_URL est√© configurada
 * 3. Ejecuta: npm run migrate:passwords
 * 
 * Agregar este script a package.json:
 * "scripts": {
 *   "migrate:passwords": "tsx scripts/migrate-passwords.ts"
 * }
 */

import bcrypt from 'bcrypt';
import prisma from '../src/lib/prisma';

const SALT_ROUNDS = 10;

/**
 * Verifica si una contrase√±a ya est√° hasheada con bcrypt
 * Los hashes de bcrypt siempre empiezan con "$2a$", "$2b$" o "$2y$"
 */
function isAlreadyHashed(password: string): boolean {
  return password.startsWith('$2a$') || 
         password.startsWith('$2b$') || 
         password.startsWith('$2y$');
}

/**
 * Migra todas las contrase√±as de usuarios a formato hasheado
 */
async function migratePasswords() {
  console.log('üîê Iniciando migraci√≥n de contrase√±as...\n');

  try {
    // Obtener todos los usuarios
    const users = await prisma.user.findMany();
    console.log(`üìä Total de usuarios encontrados: ${users.length}\n`);

    if (users.length === 0) {
      console.log('‚ÑπÔ∏è  No hay usuarios para migrar.');
      return;
    }

    let migratedCount = 0;
    let alreadyHashedCount = 0;
    let errorCount = 0;

    // Procesar cada usuario
    for (const user of users) {
      console.log(`Procesando usuario: ${user.email}`);

      // Verificar si la contrase√±a ya est√° hasheada
      if (isAlreadyHashed(user.password)) {
        console.log(`  ‚úì Ya hasheada - saltando`);
        alreadyHashedCount++;
        continue;
      }

      try {
        // Hashear la contrase√±a
        const hashedPassword = await bcrypt.hash(user.password, SALT_ROUNDS);
        
        // Actualizar en la base de datos
        await prisma.user.update({
          where: { id: user.id },
          data: { password: hashedPassword },
        });

        console.log(`  ‚úì Migrada exitosamente`);
        migratedCount++;
      } catch (error) {
        console.error(`  ‚úó Error migrando: ${error}`);
        errorCount++;
      }

      console.log(''); // L√≠nea en blanco para separar
    }

    // Resumen
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìã Resumen de la migraci√≥n:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`‚úì Contrase√±as migradas: ${migratedCount}`);
    console.log(`‚Üí Ya estaban hasheadas: ${alreadyHashedCount}`);
    console.log(`‚úó Errores: ${errorCount}`);
    console.log(`üìä Total procesados: ${users.length}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    if (migratedCount > 0) {
      console.log('‚úÖ Migraci√≥n completada exitosamente.');
      console.log('\n‚ö†Ô∏è  IMPORTANTE: Las contrase√±as originales ya no son v√°lidas.');
      console.log('Los usuarios deben usar sus contrase√±as actuales para iniciar sesi√≥n.\n');
    } else if (alreadyHashedCount === users.length) {
      console.log('‚ÑπÔ∏è  Todas las contrase√±as ya estaban hasheadas.');
      console.log('No se realizaron cambios.\n');
    }

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    throw error;
  } finally {
    // Cerrar la conexi√≥n a Prisma
    await prisma.$disconnect();
  }
}

/**
 * Funci√≥n principal con manejo de errores
 */
async function main() {
  try {
    // Confirmaci√≥n antes de ejecutar
    console.log('‚ö†Ô∏è  ADVERTENCIA ‚ö†Ô∏è');
    console.log('Este script modificar√° las contrase√±as en la base de datos.');
    console.log('Aseg√∫rate de tener un backup antes de continuar.\n');

    // En producci√≥n, podr√≠as a√±adir un prompt de confirmaci√≥n:
    // const readline = require('readline').createInterface({...});
    // const answer = await readline.question('¬øContinuar? (si/no): ');
    // if (answer !== 'si') { process.exit(0); }

    await migratePasswords();
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  }
}

// Ejecutar script
main();
